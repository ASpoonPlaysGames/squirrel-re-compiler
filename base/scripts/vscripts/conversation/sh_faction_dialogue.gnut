
global function ShFactionDialogue_Init
global function ShouldPlayFactionDialogue
global function GetFactionChoice
global function GetEnemyFaction
global function FactionUsesWaveform
global function ConversationEnabledForFaction
global function GetFactionCharacterName
global function ConvertPlayerFactionToIMCOrMilitiaTeam
#if SERVER
global function AssignEnemyFaction
#endif // SERVER

global struct FactionLeaderDataStruct
{
	string dialoguePrefix //Only thing needed for dialogue.

	//Needed for making faction leader spawn in classic_mp dropship
	asset modelName
	array<string> dropshipAnimList
	array<string> easterEggDropshipAnimList
	asset propModelName
	string propAttachment
	bool useWaveforms
	string characterName
}

struct {

	table < string, table<string,bool> > factionDisabledLines

} file

global const asset FD_MODEL_DAVIS	= $"models/humans/pilots/sp_medium_stalker_m.mdl" //Copied from SP. Ideally should be made a global const, but not touching SP files unless absolutely needed
global const asset FD_MODEL_DROZ 	= $"models/humans/pilots/sp_medium_reaper_m.mdl" //Copied from SP. Ideally should be made a global const, but not touching SP files unless absolutely needed
global const asset FD_MODEL_DROZ_TABLET_PROP = $"models/props/tablet/tablet_mini.mdl"

global table<string, FactionLeaderDataStruct > factionLeaderData

void function ShFactionDialogue_Init()
{
	//Can't precache from reading the model from the datatable, hence hard coding it here.
	PrecacheModel( $"models/Humans/heroes/imc_hero_blisk.mdl" )
	PrecacheModel( $"models/humans/pilots/sp_medium_geist_f.mdl" ) //Gates SP model. Ideally this should be a global const but we don't want to patch SP files.
	PrecacheModel( $"models/Humans/heroes/imc_hero_ash.mdl" )
	PrecacheModel( $"models/Humans/heroes/mlt_hero_sarah.mdl" )
	PrecacheModel( $"models/Humans/heroes/mlt_hero_barker.mdl" )
	PrecacheModel( $"models/Humans/heroes/imc_hero_marder.mdl" )
	PrecacheModel( $"models/Robots/marvin/marvin.mdl" )

	PrecacheModel( FD_MODEL_DAVIS ) //Precaching in here instead of FD specific script since we don't do game mode specific precaching...
	PrecacheModel( FD_MODEL_DROZ ) //Precaching in here instead of FD specific script since we don't do game mode specific precaching...

	PrecacheModel( $"models/props/flask/prop_flask_animated.mdl" ) //Barker's prop
	PrecacheModel( $"models/Weapons/p2011/w_p2011.mdl" ) //Gates' prop

	PrecacheModel( FD_MODEL_DROZ_TABLET_PROP ) //Droz's prop
	PrecacheModel( DATA_KNIFE_MODEL ) //Droz uses this too in a single animation

	var factionLeaderDataTable = GetDataTable( $"datatable/faction_leaders.rpak" )
	int numOfRows = GetDatatableRowCount( factionLeaderDataTable )
	for ( int i = 0; i < numOfRows; i++ )
	{
		string persistenceRef = GetDataTableString( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_PERSISTENCE_REF_COLUMN_NAME ) )
		FactionLeaderDataStruct factionLeaderInfo

		factionLeaderInfo.dialoguePrefix = GetDataTableString( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_FACTION_DIALOGUE_PREFIX_COLUMN_NAME ) )
		factionLeaderInfo.modelName = GetDataTableAsset( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_MODEL_NAME_COLUMN_NAME ) )
		PrecacheModel( factionLeaderInfo.modelName )

		factionLeaderInfo.propModelName = GetDataTableAsset( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_PROP_MODEL_NAME_COLUMN_NAME ) )
		if ( factionLeaderInfo.propModelName != $"" )
			PrecacheModel( factionLeaderInfo.propModelName )
		factionLeaderInfo.propAttachment = GetDataTableString( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_PROP_ATTACHMENT_COLUMN_NAME ) )

		factionLeaderInfo.characterName = GetDataTableString( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_NAME_COLUMN_NAME ) )
		factionLeaderInfo.useWaveforms= GetDataTableBool( factionLeaderDataTable, i, GetDataTableColumnByName( factionLeaderDataTable, FACTION_LEADERS_WAVEFORM_COLUMN_NAME ) )

		factionLeaderData[ persistenceRef ] <- factionLeaderInfo
		file.factionDisabledLines[ persistenceRef ] <- {}
	}

	var factionLeaderDropshipAnimsTable = GetDataTable( $"datatable/faction_leaders_dropship_anims.rpak" ) //Only lists the various dropship anims. Consider moving prop name/prop attachment etc to this table too. (Menu uses those props too, which is why we haven't moved it yet)
	int dropshipTableNumRows = GetDatatableRowCount( factionLeaderDropshipAnimsTable )
	for ( int i = 0; i < dropshipTableNumRows; i++ )
	{
		string persistenceRef = GetDataTableString( factionLeaderDropshipAnimsTable, i, GetDataTableColumnByName( factionLeaderDropshipAnimsTable, FACTION_LEADERS_PERSISTENCE_REF_COLUMN_NAME ) )
		Assert( persistenceRef in  factionLeaderData )
		string animName = GetDataTableString( factionLeaderDropshipAnimsTable, i, GetDataTableColumnByName( factionLeaderDropshipAnimsTable, FACTION_LEADERS_DROPSHIP_ANIM_NAME_COLUMN_NAME ) )
		bool easterEgg = GetDataTableBool( factionLeaderDropshipAnimsTable, i, GetDataTableColumnByName( factionLeaderDropshipAnimsTable, FACTION_LEADERS_DROPSHIP_ANIM_EASTEREGG ) )

		if ( !easterEgg )
			factionLeaderData[ persistenceRef ].dropshipAnimList.append( animName )
		else
			factionLeaderData[ persistenceRef ].easterEggDropshipAnimList.append( animName )
	}

	if ( IsLobby() ) //Don't need to register conversations in lobby
		return

	var dataTable = GetDataTable( $"datatable/faction_dialogue.rpak" )
	int numRows = GetDatatableRowCount( dataTable )
	for ( int i = 0; i < numRows; i++ )
	{
		string conversationName = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, FACTION_DIALOGUE_CONVERSATION_NAME_COLUMN_NAME ) )
		int priority = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, FACTION_DIALOGUE_PRIORITY_COLUMN_NAME ) )
		float debounce = GetDataTableFloat( dataTable, i, GetDataTableColumnByName( dataTable, FACTION_DIALOGUE_DEBOUNCE_COLUMN_NAME ) )

		string inheritedDebounceConversationsAsOneString = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable,"inheritedDebounceConversations" ) )
		array<string> inheritedDebounceConversations = split( inheritedDebounceConversationsAsOneString, " " )

		Assert( !(DoesConversationExist( conversationName ) ), "Already tried to register conversation: " + conversationName )
		RegisterConversation( conversationName, priority, debounce, inheritedDebounceConversations )

		string waveforms = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, FACTION_DIALOGUE_DISABLED_LIST_NAME ) )
		array<string> factions = split( waveforms, " " )
		foreach ( key,factionData in factionLeaderData )
		{
			file.factionDisabledLines[ key ][ conversationName ] <- factions.contains(key)
		}
	}
}

bool function ConversationEnabledForFaction( string faction, string conversation )
{
	return !file.factionDisabledLines[ faction ][ conversation ]
}

bool function FactionUsesWaveform( string faction )
{
	return factionLeaderData[ faction ].useWaveforms
}

string function GetFactionChoice( entity player )
{
	return expect string ( player.GetPersistentVar( "factionChoice" ) )
}

string function GetFactionCharacterName( string faction )
{
	return factionLeaderData[ faction ].characterName
}

string function GetEnemyFaction( entity player )
{
	return expect string ( player.GetPersistentVar( "enemyFaction" ) )
}

bool function ShouldPlayFactionDialogue( string conversationType, entity listeningPlayer ) //Might be able to run this only on the client?
{
	if ( !IsAlive( listeningPlayer ) )
		return false

	if ( IsForcedDialogueOnly( listeningPlayer ) )
	{
		//printt( "ForcedDialogueOnly, not playing Faction Dialogue:"  + conversationType )
		return false
	}

	#if CLIENT
		float debounceTime = GetConversationDebounce( conversationType )
		float lastPlayedTime = GetConversationLastPlayedTime( conversationType )
		if ( lastPlayedTime > 0 && lastPlayedTime + debounceTime > Time() )
		{
			//printt( "lastPlayedTime: " + lastPlayedTime + " debounce time: " + debounceTime + ", not playing Battle Chatter:"  + conversationType )
			return false
		}

		array<string> inheritedDebounceConversations = GetInheritedDebounceConversations( conversationType )
		/*if ( inheritedDebounceConversations.len() > 0 )
			printt( "ConvType: " + conversationType + " has "  + inheritedDebounceConversations.len() + " inheritedDebounceConversations")*/
		foreach( conv in inheritedDebounceConversations )
		{
			lastPlayedTime = GetConversationLastPlayedTime( conv )
			if ( lastPlayedTime > 0 && lastPlayedTime + debounceTime > Time() )
			{
				//printt( "inheritedDebounceConv: " + conv + " lastPlayedTime: " + lastPlayedTime + " debounce time: " + debounceTime + ", not playing Battle Chatter:"  + conversationType )
				return false
			}
		}
	#endif

	return true
}

int function ConvertPlayerFactionToIMCOrMilitiaTeam( entity player )
{
	string factionChoice = GetFactionChoice( player )

	switch( factionChoice )
	{
		case "faction_apex":
		case "faction_vinson":
		case "faction_ares":
			return TEAM_IMC

		case "faction_64":
		case "faction_marauder":
		case "faction_aces":
		case "faction_marvin":
			return TEAM_MILITIA

		default:
			printt( "******" )
			printt( "Warning, faction choice of: " + factionChoice + "has neither IMC or Militia associated with it, returning TEAM_IMC as default")
			return TEAM_IMC //Just default
	}

	unreachable

}

#if SERVER
void function AssignEnemyFaction( entity player, string friendlyFaction )
{
	int factionCount = PersistenceGetEnumCount( "faction" )
	array<string> allFactions

	for ( int i = 0; i < factionCount; i++ )
	{
		string faction = PersistenceGetEnumItemNameForIndex( "faction", i )
		if ( faction != friendlyFaction )
			allFactions.append( faction )
	}

	player.SetPersistentVar( "enemyFaction", allFactions[ RandomInt( allFactions.len() ) ] )
}
#endif // SERVER